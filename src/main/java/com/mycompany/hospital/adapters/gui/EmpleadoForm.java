/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.hospital.adapters.gui;
import com.mycompany.hospital.application.service.EmpleadoService;
import com.mycompany.hospital.domain.model.Empleado;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.stream.Collectors;
/**
 *
 * @author Oscar M
 */
public class EmpleadoForm extends javax.swing.JPanel {
    
    
     private final EmpleadoService empleadoService;
    private final CardLayout cardLayout;
    private final JPanel contentPanel;

    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField txtNombre, txtCargo;

    /**
     * Creates new form EmpleadoForm
     */
 public EmpleadoForm(EmpleadoService empleadoService, CardLayout cardLayout, JPanel contentPanel) {
        this.empleadoService = empleadoService;
        this.cardLayout = cardLayout;
        this.contentPanel = contentPanel;
        initUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Edit
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    private void initUI() {
        setLayout(new BorderLayout(0, 20));
        setBackground(new Color(245, 248, 250));
        setBorder(BorderFactory.createEmptyBorder(30, 40, 30, 40));

        // 🔹 Título
        JLabel titulo = new JLabel("Gestión de Empleados");
        titulo.setFont(new Font("Segoe UI", Font.BOLD, 22));
        titulo.setForeground(new Color(44, 62, 80));
        titulo.setHorizontalAlignment(SwingConstants.LEFT);

        // 🔹 Panel de formulario
        JPanel formPanel = new JPanel(new GridLayout(2, 2, 10, 10));
        formPanel.setOpaque(false);
        
        

        txtNombre = new JTextField();
        txtCargo = new JTextField();

        formPanel.add(new JLabel("Nombre:"));
        formPanel.add(txtNombre);
        formPanel.add(new JLabel("Cargo:"));
        formPanel.add(txtCargo);

        // 🔹 Panel de botones
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        buttonPanel.setOpaque(false);

        JButton btnGuardar = crearBoton("Guardar");
        JButton btnModificar = crearBoton("Modificar");
        JButton btnEliminar = crearBoton("Eliminar");
        JButton btnCargar = crearBoton("Cargar");
    JButton btnConsultas = crearBoton("Consultas...");
 
        JButton btnVolver = crearBoton("Volver al inicio");

        btnGuardar.addActionListener(e -> guardarEmpleado());
        btnModificar.addActionListener(e -> modificarEmpleado());
        btnEliminar.addActionListener(e -> eliminarEmpleado());
        btnCargar.addActionListener(e -> cargarEmpleados());
        btnVolver.addActionListener(e -> cardLayout.show(contentPanel, "inicio"));
        btnConsultas.addActionListener(e -> abrirDialogoConsultas());

        buttonPanel.add(btnGuardar);
        buttonPanel.add(btnModificar);
        buttonPanel.add(btnEliminar);
        buttonPanel.add(btnCargar);
        buttonPanel.add(btnConsultas);
        buttonPanel.add(btnVolver);

        // 🔹 Panel superior que contiene título, formulario y botones
        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));
        topPanel.setOpaque(false);
        topPanel.add(titulo);
        topPanel.add(Box.createVerticalStrut(20));
        topPanel.add(formPanel);
        topPanel.add(Box.createVerticalStrut(10));
        topPanel.add(buttonPanel);

        // 🔹 Tabla
        tableModel = new DefaultTableModel(new String[]{"ID", "Nombre", "Cargo"}, 0);
        table = new JTable(tableModel);
        table.setRowHeight(22);
        table.setFillsViewportHeight(true);
        JScrollPane scrollPane = new JScrollPane(table);

        // 🔹 Evento de selección de tabla
        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table.getSelectedRow() != -1) {
                int fila = table.getSelectedRow();
                txtNombre.setText(tableModel.getValueAt(fila, 1).toString());
                txtCargo.setText(tableModel.getValueAt(fila, 2).toString());
            }
        });

        // 🔹 Ensamblar todo
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
    }
    
    private JButton crearBoton(String texto) {
        JButton btn = new JButton(texto);
        btn.setFocusPainted(false);
        btn.setBackground(new Color(52, 73, 94));
        btn.setForeground(Color.WHITE);
        btn.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        btn.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        return btn;
    }

    private void guardarEmpleado() {
        try {
            Empleado empleado = new Empleado(0, txtNombre.getText(), txtCargo.getText());
            empleadoService.crearEmpleado(empleado);
            cargarEmpleados();
            limpiarCampos();
            JOptionPane.showMessageDialog(this, "Empleado guardado correctamente");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al guardar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarEmpleado() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            try {
                int id = (int) tableModel.getValueAt(selectedRow, 0);
                Empleado empleado = new Empleado(id, txtNombre.getText(), txtCargo.getText());
                empleadoService.actualizarEmpleado(empleado);
                cargarEmpleados();
                limpiarCampos();
                JOptionPane.showMessageDialog(this, "Empleado modificado correctamente");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al modificar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un empleado para modificar");
        }
    }

    private void eliminarEmpleado() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int) tableModel.getValueAt(selectedRow, 0);
            int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                empleadoService.eliminarEmpleado(id);
                cargarEmpleados();
                limpiarCampos();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un empleado para eliminar");
        }
    }

    private void cargarEmpleados() {
        tableModel.setRowCount(0);
        List<Empleado> empleados = empleadoService.listarEmpleados();
        for (Empleado e : empleados) {
            tableModel.addRow(new Object[]{ e.getId(), e.getNombre(), e.getCargo() });
        }
    }
    
     private void abrirDialogoConsultas() {
        Frame owner = (Frame) SwingUtilities.getWindowAncestor(this);
        DialogoConsultasEmpleado dialogo = new DialogoConsultasEmpleado(owner, empleadoService);
        dialogo.setVisible(true);
    }
    private void limpiarCampos() {
        txtNombre.setText("");
        txtCargo.setText("");
        table.clearSelection();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
